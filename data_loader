import numpy as np
import torch
from torch.utils.data import DataLoader, TensorDataset

def get_cnn_dataLoader(batch_size=64, dir_path='./npzs_CNN/'):
    train = np.load(dir_path + 'CNNtraindata.npz')
    test = np.load(dir_path + 'CNNtestdata.npz')
    validation = np.load(dir_path + 'CNNvaliddata.npz')
    
    train_images = torch.from_numpy(train['imagelist'])
    train_ys = torch.from_numpy(train['targetlist'])
    
    test_images = torch.from_numpy(test['imagelist'])
    test_ys = torch.from_numpy(test['targetlist'])
    
    valid_images = torch.from_numpy(validation['imagelist'])
    valid_ys = torch.from_numpy(validation['targetlist'])
    
    train_dataset = TensorDataset(train_images, train_ys)
    test_dataset = TensorDataset(test_images, test_ys)
    valid_dataset = TensorDataset(valid_images, valid_ys)
    
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=True)
    valid_loader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=True)
    
    return train_loader, test_loader, valid_loader
    
def get_dataLoader(batch_size=64, dir_path='./npzs/', file_number=5, norm=False):
    cnn_data = np.load(dir_path + 'CNNdata_' + '1' + '.npz')
    train_images = cnn_data['image'][:80]
    train_ys = cnn_data['target'][:80]
    test_images = cnn_data['image'][80:]
    test_ys = cnn_data['target'][80:]
    for i in range(2, file_number + 1):
        file_path = dir_path + 'CNNdata_' + str(i) + '.npz'
        cnn_data = np.load(file_path)
        imgs = cnn_data['image']
        labels = cnn_data['target']
        train_images = np.concatenate((train_images, imgs[:80]), 0)
        test_images = np.concatenate((test_images, imgs[80:]))
        train_ys = np.concatenate((train_ys, labels[:80]), 0)
        test_ys = np.concatenate((test_ys, labels[80:]), 0)
    train_images = torch.from_numpy(train_images)
    train_ys = torch.from_numpy(train_ys)
    test_images = torch.from_numpy(test_images)
    test_ys = torch.from_numpy(test_ys)
    
    mean = train_ys.mean()
    std = train_ys.std()
    
    print(train_images.size())
    if norm:
        for y in train_ys:
            for i in range(len(y)):
                y[i] = (y[i]-mean)/std
    print(train_ys)
    
    train_dataset = TensorDataset(train_images, train_ys)
    test_dataset = TensorDataset(test_images, test_ys)
    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=True)
    

    
    
    return train_loader, test_loader, mean, std


